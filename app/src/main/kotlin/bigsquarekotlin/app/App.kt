/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package bigsquarekotlin.app

import bigsquarekotlin.utilities.SquareIntArray
import bigsquarekotlin.utilities.parseSquare
import bigsquarekotlin.utilities.streamForFile

data class Coord( val y : Int, val x : Int)
data class MaxData( val value : Int, val items : MutableList<Coord>)

fun main() {
    val ary = parseSquare(streamForFile("dat1.txt"))
    val exteriorArray = SquareIntArray(ary.size, IntArray( ary.size * ary.size) { 0 })

    var maxData : MaxData? = null

    for (y in 0 until ary.size) {
        for (x in 0 until ary.size) {
            val newValue = if (ary[y, x]) {
                if (y == 0 || x == 0) {
                    1
                } else {
                    minOf(
                        exteriorArray[y - 1, x], exteriorArray[y, x - 1],
                        exteriorArray[y - 1, x - 1]
                    ) + 1
                }
            } else {
                0
            }
            exteriorArray[y, x] = newValue
            if (maxData == null) {
                maxData = MaxData(newValue, mutableListOf(Coord(y, x)))
            } else {
                when {
                    newValue == maxData!!.value -> maxData.items.add(Coord(y, x))
                    newValue > maxData!!.value -> maxData = MaxData(newValue, mutableListOf(Coord(y, x)))
                    else -> throw IllegalStateException("Should not happen")
                }
            }
        }
    }
    exteriorArray.dump()
}
